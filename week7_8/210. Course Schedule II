class Solution {
public:
    vector<int> findOrder(int numCourses, vector<vector<int>>& prerequisites) {
        int n = numCourses;
        vector<vector<int>> mat(n, vector<int>(n, 0));
        vector<int> inDegree(n, 0);
        vector<bool> visited(n, false);
        vector<int> ans;
        queue<int> q;
  
        for (int i = 0; i < prerequisites.size(); i++) {
            int u = prerequisites[i][1];
            int v = prerequisites[i][0];
            mat[u][v] = 1;
            inDegree[v]++;
        }

        for (int i = 0; i < n; i++) {
            if (inDegree[i] == 0) {
                q.push(i);
                visited[i] = true;
            }
        }

        while (!q.empty()) {
            int vertex = q.front();
            q.pop();
            ans.push_back(vertex);
            
            for (int i = 0; i < n; i++) {
                if (mat[vertex][i] == 1 && !visited[i]) {
                    inDegree[i]--;
                    if (inDegree[i] == 0) {
                        q.push(i);
                        visited[i] = true;
                    }
                }
            }
        }

        if (ans.size() != numCourses) {
            return {};
        }

        return ans;
    }
};
