class Solution {
public:
    bool dfs(vector<vector<int>>& graph, int u, int c, vector<bool>& visited, vector<int>& color) {
        visited[u] = true;
        color[u] = c;
        
        for (int v : graph[u]) 
        {
            if (visited[v] && color[v] == c) 
            {
                return false;
            }
            if (!visited[v]) 
            {  
                if (!dfs(graph, v, !c, visited, color)) 
                {
                    return false;
                }
            }
        }
        return true;
    }
        bool isBipartite(vector<vector<int>>& graph) {
        int n = graph.size();
        vector<int> color(n, -1);
        vector<bool> visited(n, false);
        
        for (int i = 0; i < n; i++) 
        {
            if (!visited[i]) 
            {
                if (!dfs(graph, i, 0, visited, color))
                {
                    return false;
                }
            }
        }
        return true;
    }
};
